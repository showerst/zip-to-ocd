# Combine US Census Zip code to State Level Legislative District files
# with Opencivicdata division ids

import csv
import urllib.request
import codecs
import us

# first build a map of FIPS -> OCD

sldl_url = 'https://raw.githubusercontent.com/opencivicdata/ocd-division-ids/master/identifiers/country-us/census_autogenerated_14/us_sldl.csv'
sldu_url = 'https://raw.githubusercontent.com/opencivicdata/ocd-division-ids/master/identifiers/country-us/census_autogenerated_14/us_sldu.csv'

ocd_urls = [sldl_url, sldu_url]

ocd_mapping = {}
zip_to_ocd_mapping = []

states_to_skip = ['AS','PI','GU','MP','VI']

for url in ocd_urls:
    data = urllib.request.urlopen(url)
    csvfile = csv.reader(codecs.iterdecode(data, 'utf-8'))
    next(csvfile)

    for line in csvfile:
        if line[1]:
            ocd_mapping[line[1]] = line[0]

# Then grab the census Zip -> FIPS files
states = us.states.mapping('abbr', 'fips')
print(states)

for state in states:
    fips = states[state]
    chambers = ['l','u']
    if fips and state not in states_to_skip:
        for chamber in chambers:
            zips_url = 'https://www2.census.gov/geo/relfiles/cdsld13/{}/zc_l{}_delim_{}.txt'.format(fips, chamber, fips)

            print('fetching {}'.format(zips_url))

            try:
                data = urllib.request.urlopen(zips_url)
            except Exception:
                print("Unable to download {}".format(zips_url))
                continue

            csvfile = csv.reader(codecs.iterdecode(data, 'utf-8'))

            # skip 2 header rows
            next(csvfile)
            next(csvfile)

            for line in csvfile:
                if line[1]:
                    full_fips = 'sld{}-{}{}'.format(chamber, fips, line[2])
                    if full_fips in ocd_mapping:
                        zip_to_ocd_mapping.append([line[1], ocd_mapping[full_fips], full_fips])
                    else:
                        print("Can't find {}".format(full_fips))

filename = 'sld.csv'
f = open(filename, 'w')
write_outfile = csv.writer(f)

write_outfile.writerow(['zip','ocd','fips','validFrom'])
for line in zip_to_ocd_mapping:
    write_outfile.writerow([line[0], line[1], line[2], '2016-01-01'])
